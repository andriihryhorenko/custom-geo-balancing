load_module modules/ngx_http_geoip2_module.so;

worker_processes 1;

events { worker_connections 1024; }

http {
    geoip2 /var/lib/GeoIP/GeoLite2-Country.mmdb {
      $geoip2_data_country_iso_code default=PL source=$remote_addr country iso_code; 
    }

    map $geoip2_data_country_iso_code $allowed_country {
      default no;
      PL yes;
    } 


    upstream loadbalancer1 {
      	server nginx-app1:81 max_fails=3 fail_timeout=5s;
        server nginx-app2:82 max_fails=3 fail_timeout=5s;
        server nginx-app5:85 backup;
    }

    upstream loadbalancer2 {
        server nginx-app3:83 max_fails=3 fail_timeout=5s;
        server nginx-app4:84 max_fails=3 fail_timeout=5s;
        server nginx-app5:85 backup;
    }



    server {

        location / {
            add_header custom $http_custom;
            proxy_set_header custom $http_custom;
            proxy_set_header custom $upstream_http_custom;
            add_header iso $geoip2_data_country_iso_code;
            proxy_set_header iso $geoip2_data_country_iso_code;

            if ($allowed_country ~* yes ) {
                proxy_pass http://loadbalancer1;
			      }

            if ($allowed_country ~* no ) {
                proxy_pass http://loadbalancer2;
            }
        }

    }

    
}

